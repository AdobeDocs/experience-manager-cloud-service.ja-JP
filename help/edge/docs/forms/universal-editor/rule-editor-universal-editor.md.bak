---
title: Rule Editor for Dynamic Forms in Universal Editor
description: Create dynamic, intelligent forms using the Rule Editor in Universal Editor. Add conditional logic, calculations, and interactive behaviors without coding.
feature: Edge Delivery Services
role: Admin, Architect, Developer
level: Intermediate
exl-id: 846f56e1-3a98-4a69-b4f7-40ec99ceb348
---

# Rule Editor for Dynamic Forms in Universal Editor

The Rule Editor allows authors to turn static forms into responsive, intelligent experiences—without writing code. You can conditionally show fields, perform calculations, validate data, guide users through flows, and integrate business logic that adapts as people type.

## What you'll learn

By the end of this guide, you will be able to:

- Understand how rules work and when to use different rule types
- Enable and access the Rule Editor in Universal Editor
- Create conditional logic to show or hide fields dynamically
- Implement automated calculations and data validation
- Build custom functions for complex business rules
- Apply best practices for performance, maintainability, and UX

## Why use the Rule Editor?

- **Conditional logic**: Show relevant fields only when needed to reduce noise and cognitive load.
- **Dynamic calculations**: Compute values automatically (totals, rates, tax) as users type.
- **Data validation**: Prevent errors early with real-time checks and clear messages.
- **Guided experiences**: Lead users through logical steps (wizards, branching).
- **No-code authoring**: Configure powerful behavior through a visual interface.

Common scenarios include tax calculators, loan and premium estimators, eligibility flows, multi-step applications, and surveys with conditional questions.

## How rules work

A rule defines what should happen when a condition is met. Conceptually, a rule has two parts:

- **Condition**: A statement that evaluates to true or false.
  - Examples: "Income > 50,000," "Coverage = 'Yes'," "Field is empty"
- **Action**: What occurs when the condition is true (and optionally, when it is false).
  - Examples: Show/Hide a field, Set/Clear a value, Validate input, Enable/Disable a button

### Rule logic patterns

- **Condition → Action (When/Then)**
  
  ```text
  WHEN Gross Salary > 50000
  THEN Show "Additional Deduction"
  ```

  Best for conditional visibility and progressive disclosure.

- **Action ← Condition (Set If/Only if)**

  ```text
  SET Taxable Income = Gross Salary - Deductions
  IF Deductions are applicable
  ```

  Best for calculations and data transformations.

- **If → Then → Else (Alternate action)**

  ```text
  IF Income > 50000
  THEN Show "High Income" fields
  ELSE Show "Standard Income" fields
  ```

  Best for branching logic and mutually exclusive flows.

### Real-world example

- **Condition**: "Gross salary exceeds $50,000"
- **Primary action**: Show "Additional Deduction"
- **Alternate action**: Hide "Additional Deduction"
- **Result**: Users see only the fields that apply to them

## Prerequisites

### Access requirements

- Authoring access to AEM as a Cloud Service
- Universal Editor with the Rule Editor extension enabled
- Permission to edit forms in your environment

### Technical requirements

- Basic form design knowledge (field types, properties)
- Understanding of your business logic and validation requirements
- Optional: Basic JavaScript (for custom functions only)

### Enable the Rule Editor extension

The Rule Editor extension is disabled by default. Enable it via the Extension Manager.

- After enabling, the Rule Editor icon appears when you select a form component: ![edit-rules](/help/forms/assets/edit-rules-icon.svg)

![Universal Editor rule editor](/help/edge/docs/forms/assets/universal-editor-rule-editor.png)
Figure: Rule Editor icon appears when you select form components

To open the Rule Editor:

1. Select a form component in Universal Editor.
2. Click the Rule Editor icon.
3. The Rule Editor opens in a side panel.

![Rule Editor user interface](/help/edge/docs/forms/assets/rule-editor-for-field.png)
Figure: Rule Editor interface for editing component rules

>[!NOTE]
>
> Throughout this article, "form component" and "form object" refer to the same elements (for example, inputs, buttons, panels).

## Rule Editor interface overview

![Rule Editor user Interface](/help/edge/docs/forms/assets/rule-editor-interface.png)
Figure: Complete Rule Editor interface with numbered components

- **Component title and rule type**: Confirms the selected component and active rule type.
- **Form Objects and Functions panel**:
  - Form Objects: hierarchical view of fields and containers for referencing in rules
  - Functions: built-in math, string, date, and validation helpers
- **Panel toggle**: Show/hide the objects and functions panel to increase workspace
- **Visual rule builder**: Drag-and-drop, dropdown-driven rule composer
- **Controls**: Done (save), Cancel (discard). Always test rules before saving.

### Managing existing rules

When a component already has rules, you can:

- **View**: See rule summaries and logic
- **Edit**: Modify conditions and actions
- **Reorder**: Change execution order (top to bottom)
- **Enable/Disable**: Toggle rules for testing
- **Delete**: Remove rules safely

>[!TIP]
>
> Put specific rules before general ones. Execution is top-to-bottom.

## Available rule types

Choose the rule type that best matches your intent.

### Conditional logic

- **When**: Primary rule for complex conditional behavior (Condition → Action ± Else)
- **Hide/Show**: Controls visibility based on a condition (progressive disclosure)
- **Enable/Disable**: Controls whether a field is interactive (for example, disable Submit until required fields are valid)

### Data manipulation

- **Set Value Of**: Auto-populate values (for example, dates, totals, copies)
- **Clear Value Of**: Remove data when conditions change
- **Format**: Transform display formatting (currency, phone, date) without altering stored values

### Validation

- **Validate**: Custom validation logic, including cross-field checks and business rules

### Calculation

- **Mathematical Expression**: Compute values in real time (totals, tax, ratios)

### User interface

- **Set Focus**: Move focus to a specific field (use sparingly)
- **Set Property**: Modify component properties dynamically (placeholder, options, etc.)

### Form control

- **Submit Form**: Programmatically submit the form (only after validations pass)
- **Reset Form**: Clear and reset to initial state (confirm before use)
- **Save Form**: Save as draft for later (long forms, multi-session)

### Advanced

- **Invoke Service**: Call external APIs/services (handle loading and errors)
- **Add/Remove Instance**: Manage repeatable sections (for example, dependents, addresses)
- **Navigate To**: Route to other forms/pages (preserve data before navigation)
- **Navigate Among Panels**: Control wizard step navigation and skipping
- **Dispatch Event**: Trigger custom events for integrations or analytics

## Step-by-step tutorial: Build a smart tax calculator

This example demonstrates conditional visibility and automatic calculations.

![Screenshot of the Rule Editor interface showing the creation of a conditional rule with When-Then logic for form field visibility](/help/edge/docs/forms/assets/rule-editor-1.png)
Figure: Tax calculation form with intelligent conditional fields

### Tutorial overview

You will build a form that:

1. Adapts to user input by showing relevant fields
2. Calculates values in real time
3. Validates data to improve accuracy

### Form structure

| Field Name              | Type          | Purpose                        | Behavior                                |
|-------------------------|---------------|--------------------------------|-----------------------------------------|
| Gross Salary            | Number Input  | User's annual income           | Triggers conditional logic               |
| Additional Deduction    | Number Input  | Extra deductions (if eligible) | Visible only when Salary > $50,000       |
| Taxable Income          | Number Input  | Calculated value               | Read-only, updates on change             |
| Tax Payable             | Number Input  | Calculated value               | Read-only, computed at a flat rate       |

### Business logic

- **Rule 1: Conditional display**

  ```text
  WHEN Gross Salary > 50,000
  THEN Show "Additional Deduction"
  ELSE Hide "Additional Deduction"
  ```

- **Rule 2: Taxable Income calculation**

  ```text
  SET Taxable Income = Gross Salary - Additional Deduction
  (Only when Additional Deduction applies)
  ```

- **Rule 3: Tax Payable calculation**

  ```text
  SET Tax Payable = Taxable Income × 10%
  (Simplified flat rate)
  ```

### Implementation steps

#### 1. Create the foundation form

Objective: Build the base form with all fields and initial settings.

1. Open Universal Editor:
   - Go to AEM Sites console, open the page, click Edit.
2. Add components in this order:
   - Title (H2): "Tax Calculation Form"
   - Number Input: "Gross Salary" (Required)
   - Number Input: "Additional Deduction" (Optional)
   - Number Input: "Taxable Income" (Read-only)
   - Number Input: "Tax Payable" (Read-only)
   - Submit button: "Calculate Tax"
3. Configure initial visibility:
   - Hide "Additional Deduction"
   - Set "Taxable Income" and "Tax Payable" to Read-only

![Screenshot of a tax calculation form with input fields for gross salary, marital status, and dependent children, demonstrating the form structure before rules are applied](/help/edge/docs/forms/assets/rule-editor2.png)
Figure: Initial form structure with basic components configured

Checkpoint: The form has all fields, "Additional Deduction" is hidden, and calculated fields are read-only.

#### 2. Add a conditional rule (When)

Goal: Show "Additional Deduction" when Gross Salary > 50,000.

1. Select the Gross Salary field and click the Rule Editor icon.
2. Click Create. If the default type is "Set Value Of," switch the rule type to "When."
3. In the condition, choose "is greater than," then enter 50000.
4. In the Then action, choose "Show," and select the "Additional Deduction" field.
5. Add Else and choose "Hide," targeting "Additional Deduction."
6. Click Done to save.

>[!NOTE]
>
> You can implement the same behavior by writing a Show/Hide rule on "Additional Deduction" instead of a When rule on "Gross Salary."

#### 3. Add calculation rules

Goal: Compute "Taxable Income" and "Tax Payable."

- Taxable Income:
  1. Select "Taxable Income," open the Rule Editor, click Create.
  2. Choose "Mathematical Expression."
  3. Build the expression: Gross Salary − Additional Deduction.
  4. Save.

- Tax Payable:
  1. Select "Tax Payable," open the Rule Editor, click Create.
  2. Choose "Mathematical Expression."
  3. Build the expression: Taxable Income × 10 ÷ 100.
  4. Save.

#### 4. Preview the form

Preview the form and test:

- Enter Gross Salary = 60,000
- "Additional Deduction" becomes visible
- "Taxable Income" and "Tax Payable" update automatically

![Preview a form](/help/edge/docs/forms/assets/rule-editor-form.png)

## Advanced: Custom functions

Custom functions extend rules beyond built-in capabilities.

When to use:

- Complex calculations not covered by built-in expressions
- Business-specific validations
- Data transformations and formatting
- Integrations with external systems

Benefits:

- Reusability across forms
- Maintainability via centralized logic
- Performance through optimized JavaScript
- Flexibility for edge cases

### Creating custom functions

- **File location**: `/blocks/form/functions.js`

Workflow:

1. **Function declaration**
   - Use descriptive names and parameters
   - Document inputs and return values
2. **Logic implementation**
   - Write clean JavaScript and handle edge cases
3. **Export**
   - Use named exports; test locally before deployment
4. **Documentation**
   - Add JSDoc and usage examples

Example:

```javascript
/**
 * @name getFullName
 * @description Concatenate first and last name and trim whitespace.
 * @param {string} firstName
 * @param {string} lastName
 * @returns {string}
 */
function getFullName(firstName, lastName) {
  return `${firstName} ${lastName}`.trim();
}

/**
 * @name days
 * @description Calculate the number of days between two dates.
 * @param {Date|string} endDate
 * @param {Date|string} startDate
 * @returns {number}
 */
function days(endDate, startDate) {
  const start = typeof startDate === 'string' ? new Date(startDate) : startDate;
  const end = typeof endDate === 'string' ? new Date(endDate) : endDate;

  if (Number.isNaN(start.getTime()) || Number.isNaN(end.getTime())) {
    return 0;
  }

  const diffInMs = Math.abs(end.getTime() - start.getTime());
  return Math.floor(diffInMs / (1000 * 60 * 60 * 24));
}

export { getFullName, days };
```

![Adding custom Function](/help/edge/docs/forms/assets/create-custom-function.png)

Use in Rule Editor:

1. Add your function to `/blocks/form/functions.js` and export it.
2. Deploy and ensure the build completes.
3. In Rule Editor, choose "Function Output" where applicable and select your function.
4. Preview and verify behavior.

![Custom Function in Rule Editor](/help/edge/docs/forms/assets/custom-function-rule-editor.png)

## Best practices for rule development

### Performance optimization

- Minimize rule complexity; split large logic into small, focused rules
- Order rules by frequency (most common first)
- Keep rule sets per component manageable
- Prefer reusable custom functions over duplicating logic

### User experience

- Provide clear validation and inline feedback
- Avoid jarring visual changes; use show/hide thoughtfully
- Test across devices and layouts

### Development hygiene

- Test with edge cases and known values
- Verify across browsers
- Document intent behind complex rules, not just mechanics
- Maintain a rule inventory for large forms
- Use consistent naming for components and rules
- Version custom functions and test in non-production environments

## Troubleshooting common issues

### Rules not triggering

- Verify component names and references
- Check execution order (top to bottom)
- Validate conditions with known values
- Inspect browser console for blocking errors

### Incorrect behavior

- Review operators and grouping (AND/OR)
- Test expression fragments individually
- Confirm data types (numbers vs strings)

### Performance issues

- Simplify deeply nested conditions
- Profile custom functions
- Minimize external calls inside rules
- Use specific selectors and references

### Custom function issues

- Confirm file path: `/blocks/form/functions.js`
- Ensure named exports are correct
- Confirm the build includes your changes
- Clear browser cache after deployment
- Validate parameter types and error handling

### Universal Editor integration

- Confirm the Rule Editor extension is enabled
- Select a supported component
- Use a supported browser (Chrome, Firefox, Safari)
- Verify you have required permissions

## Important limitations

>[!IMPORTANT]
>
> Custom function constraints:
>
> - Static/dynamic imports are not supported
> - All logic must reside in `/blocks/form/functions.js`
> - Functions must be synchronous (no async/await or Promises)
> - Browser API access is limited

>[!WARNING]
>
> Production considerations:
>
> - Test thoroughly in staging
> - Monitor performance post-deploy
> - Have a rollback plan for rule issues
> - Consider slow networks and low-spec devices

## Summary

The Rule Editor in Universal Editor enables authors to build dynamic, intelligent forms that adapt to user input. With conditional logic, on-the-fly calculations, and optional custom functions, you can deliver faster, clearer, and more reliable form experiences—without writing application code.

### Next steps

 
1. Start with simple show/hide rules
2. Use this tax calculator example as a baseline
3. Progress to mathematical expressions and validations
4. Add custom functions for specialized logic
5. Test thoroughly across devices and conditions
